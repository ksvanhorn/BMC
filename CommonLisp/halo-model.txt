(:model
  (:args
    (nresp integerp)
    (nvars integerp)
    (nlevels (integerp nvars))
    (ucp (realxn nvars (- (vmax nlevels) 1)))
    (mu_nu (real 3))
    (sigma_nu (realp 3))
    (sigma_mu_y_form realp)
    (sigma_beta (realp (- nvars 1)))
    (alpha_lambda_y_form realp)
    (beta_lambda_y_form realp)
    (sigma_mu_x_form (realp (- nvars 1)))
    (dof_Lambda_x_form realp)
    (scale_Lambda_x_form (real (- nvars 1) (- nvars 1)))
    (sigma_mu_x_halo (realp nvars))
    (sigma_gamma (realp nvars))
    (alpha_lambda_x_halo (realp nvars))
    (beta_lambda_x_halo (realp nvars))
    (sigma_mu_x_garb (realp nvars))
    (alpha_lambda_x_garb (realp nvars))
    (beta_lambda_x_garb (realp nvars))
    (alpha_p_segment (realp 3)))
  (:reqs
    (<= 3 nvars)
    (:quant qand k (1 nvars) (<= 3 (@ nlevels k)))
    (:quant qand k (1 nvars)
      (:quant qand lvl (1 (- (@ nlevels k) 1))
        (is-real (@ ucp k lvl))))
    (:quant qand k (1 nvars)
      (:quant qand lvl (1 (- (@ nlevels k) 2))
        (< (@ ucp k lvl) (@ ucp k (+ 1 lvl)))))
    (< (- nvars 2) dof_Lambda_x_form)
    (is-symm-pd scale_Lambda_x_form))
  (:vars
    (nu (real 3))
    (dls (real nresp 2))
    (v (integerp nresp nvars))
    (x (real nresp nvars))
    (segment (integerp nresp))
    (mu_y_form real)
    (lambda_y_form realp)
    (beta (real (- nvars 1)))
    (mu_x_form (real (- nvars 1)))
    (Lambda_x_form (real (- nvars 1) (- nvars 1)))
    (ksi (real nresp (- nvars 1)))
    (mu_x_halo (real nvars))
    (gamma (real nvars))
    (lambda_x_halo (realp nvars))
    (mu_x_garb (real nvars))
    (lambda_x_garb (realp nvars))
    (p_segment (realp 3)))
  (:invs
    (:quant qand r (1 nresp) (:quant qand k (1 nvars)
      (<= (@ v r k) (@ nlevels k))))
    (:quant qand r (1 nresp) (<= (@ segment r) 3))
    (is-symm-pd Lambda_x_form)
    (= 1 (sum p_segment)))
  (:body
    ; segments
    (~ p_segment (ddirch alpha_p_segment))
    (:for r (1 nresp)
      (~ (@ segment r) (dcat p_segment)))

    ; ksi for halo and garbage segments
    (:for r (1 nresp)
      (:if (!= 1 (@ segment r))
	(:for k (1 (- nvars 1))
	  (~ (@ ksi r k) (dnorm 0.0 1.0)))))

    ; formers
    (~ lambda_y_form (dgamma alpha_lambda_y_form beta_lambda_y_form))
    (~ mu_y_form (dnorm 0 sigma_mu_y_form))
    (~ Lambda_x_form (dwishart dof_Lambda_x_form scale_Lambda_x_form))
    (:for k (1 (- nvars 1))
      (:block
        (~ (@ beta k) (dnorm 0 (@ sigma_beta k)))
        (~ (@ mu_x_form k) (dnorm 0 (@ sigma_mu_x_form k)))))
    (:let (mu_form (mu-form mu_y_form mu_x_form beta))
      	  (cd (form-covariance-decomp lambda_y_form beta Lambda_x_form))
	  (G (ksi-mean-coeffs-cov-decomp cd))
	  (del (snd cd))
      (:for r (1 nresp)
        (:if (= 1 (@ segment r))
          (:block
            (~ (@ x r (:range 2 nvars))
               (dmvnorm mu_x_form (inv-pd Lambda_x_form)))
	    (:let (sigma (^-1/2 lambda_y_form))
                  (mu (+ mu_y_form (dot (@ x r (:range 2 nvars)) beta)))
              (~ (@ x r 1) (dnorm mu sigma)))
	    (:let (mu_ksi (dot G (@- (@ x r :all) mu_form)))
	      (:for k (1 (- nvars 1))
		(~ (@ ksi r k) (dnorm (@ mu_ksi k)
				      (^-1/2 (+ 1.0 (@ del k)))))))))))

    ; haloers
    (:for k (1 nvars)
      (:block
        (:if (= 1 k)
	  (~ (@ gamma k) (dnorm-trunc 0 (@ sigma_gamma k) %infty- 0))
          (~ (@ gamma k) (dnorm 0 (@ sigma_gamma k))))
        (~ (@ mu_x_halo k)(dnorm 0 (@ sigma_mu_x_halo k)))
        (~ (@ lambda_x_halo k)
           (dgamma (@ alpha_lambda_x_halo k) (@ beta_lambda_x_halo k)))))
    (:for r (1 nresp)
      (:if (= 2 (@ segment r))
        (:for k (1 nvars)
          (:let (sigma (^-1/2 (@ lambda_x_halo k)))
	        (mu (+ (@ mu_x_halo k) (* (@ gamma k) (@ ksi r 1))))
            (~ (@ x r k) (dnorm mu sigma))))))

    ; garbage
    (:for k (1 nvars)
      (:block
        (~ (@ mu_x_garb k) (dnorm 0 (@ sigma_mu_x_garb k)))
        (~ (@ lambda_x_garb k)
           (dgamma (@ alpha_lambda_x_garb k) (@ beta_lambda_x_garb k)))))
    (:for r (1 nresp)
      (:if (= 3 (@ segment r))
        (:for k (1 nvars)
          (:let (sigma (^-1/2 (@ lambda_x_garb k)))
            (~ (@ x r k) (dnorm (@ mu_x_garb k) sigma))))))

    ; scale usage
    (:for h (1 3)
      (~ (@ nu h) (dnorm (@ mu_nu h) (@ sigma_nu h))))
    (:let (sig_1_2 (* (exp (* 1/2 (+ (@ nu 1) (@ nu 2))))
	                (tanh (@ nu 3))))
          (Sigma (rmat (vec (exp (@ nu 1)) sig_1_2)
                       (vec sig_1_2 (exp (@ nu 2)))))
          (mu (vec 0 (* -1/2 (@ Sigma 2 2))))
      (:for r (1 nresp)
        (:block
          (~ (@ dls r :all) (dmvnorm mu Sigma))
	  (:let (delta (@ dls r 1))
                (scale (exp (@ dls r 2)))
	    (:for k (1 nvars)
              (:let (cp (:quant qvec lvl (1 (- (@ nlevels k) 1))
                          (/ (- (@ ucp k lvl) delta) scale)))
                (~ (@ v r k) (dinterval (@ x r k) cp))))))))))
